{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MockDataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.charactersLoader$ = new BehaviorSubject(false);\n    this.planetsLoader$ = new BehaviorSubject(false);\n  }\n  getCharactersLoader() {\n    return this.charactersLoader$;\n  }\n  getPlanetLoader() {\n    return this.planetsLoader$;\n  }\n}\nMockDataService.ɵfac = function MockDataService_Factory(t) {\n  return new (t || MockDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nMockDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MockDataService,\n  factory: MockDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAmC,MAAM;;;AAKjE,OAAM,MAAOC,eAAe;EAIxBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAHvB,sBAAiB,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;IACvD,mBAAc,GAAG,IAAIA,eAAe,CAAU,KAAK,CAAC;EAEd;EAI7CI,mBAAmB;IACf,OAAO,IAAI,CAACC,iBAAiB;EACjC;EAEAC,eAAe;IACX,OAAO,IAAI,CAACC,cAAc;EAC9B;;AAdSN,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAO,SAAfP,eAAe;EAAAQ,YAFZ;AAAM","names":["BehaviorSubject","MockDataService","constructor","httpClient","getCharactersLoader","charactersLoader$","getPlanetLoader","planetsLoader$","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\angular-fundamentals-template\\src\\app\\mock-data.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, finalize, map, Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class MockDataService {\r\n    public charactersLoader$ = new BehaviorSubject<boolean>(false);\r\n    public planetsLoader$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(private httpClient: HttpClient) {}\r\n\r\n  \r\n\r\n    getCharactersLoader(): Observable<boolean> {\r\n        return this.charactersLoader$;\r\n    }\r\n\r\n    getPlanetLoader(): Observable<boolean> {\r\n        return this.planetsLoader$;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}